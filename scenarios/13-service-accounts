Scenario 13) Service Users
-As Admin use 13-sum-admin.yaml to deploy roadmin Service Account, ClusterRole of read-only, and proper Role Binding for roadmin user to read-only role
- As dev use 13-sum-user.yaml to deploy Bastion Pod. Make sure that alpinebastion image from scenario 6 was built properly and is available in private repo. 
- Bastion pod is nice example related to previous scenario where we are rebuilding alpine image, to have some basic workspace tools. It is also secured with dedicated non-root user, minimum subset of Linux Capabilities and can be run without privilege escalation.
- Bastion can be reached via ssh to exposed service. User is dev and private key can be found in scenarios/alpinebastion directory. Bastion is also deployed with proper contexts and certs installed, so user dev from bastion can authenticate against kubernetes API and be bind to developer group (in the same way as dev user from scenario 9)
- Bastion is also allowed to use roadmin kubernetes service user - token is mounted in /run/secrets/kubernetes.io/serviceaccount/token

Scenario 13) Questions
- Try using Kubernetes API from level of dev user on bastion. 
    KUBE_TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
    curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" \
    https://kubernetes.default:443/api/v1/namespaces/myapp/pods/$HOSTNAME
- Familiarize with Dockerfile and definition of Bastion pod - it briefly shows how kubernetes and docker images can (should?) be secured.

